generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_URI")
}

model account_entries {
  account_entry_id        Int                       @id @default(autoincrement())
  account_plan_id         Int?
  parent_account_id       Int?
  account_code            String                    @db.VarChar(50)
  account_name            String                    @db.VarChar(100)
  account_type            String                    @db.VarChar(50)
  account_level           Int?                      @default(1)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  is_contra_account       Boolean?                  @default(false)
  account_plans           account_plans?            @relation(fields: [account_plan_id], references: [account_plan_id], onDelete: Cascade, onUpdate: NoAction)
  account_entries         account_entries?          @relation("account_entriesToaccount_entries", fields: [parent_account_id], references: [account_entry_id], onDelete: Cascade, onUpdate: NoAction)
  other_account_entries   account_entries[]         @relation("account_entriesToaccount_entries")
  account_movements       account_movements[]
  accounts                accounts[]
  bank_accounts           bank_accounts[]
  contracts_recurring     contracts_recurring[]
  installments            installments[]
  payment_methods         payment_methods[]
  service_groups          service_groups[]
  system_default_accounts system_default_accounts[]
}

model account_movement_errors {
  error_id      Int       @id @default(autoincrement())
  origin        String    @db.VarChar(100)
  operation     String    @db.VarChar(100)
  reference_id  Int
  parameters    Json?
  error_message String?
  status        String?   @default("pending") @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}

model account_movements {
  movement_type       String           @db.VarChar(10)
  amount              Decimal          @db.Decimal(10, 2)
  movement_date       DateTime?        @default(now()) @db.Timestamp(6)
  description         String?
  status              String?          @default("ativo") @db.VarChar(50)
  reference_id        Int?
  reference_type      String?          @db.VarChar(50)
  account_movement_id Int              @id @default(autoincrement())
  account_entry_id    Int?
  license_id          Int?
  account_entries     account_entries? @relation(fields: [account_entry_id], references: [account_entry_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_account_entry")
  licenses            licenses?        @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
}

model account_plans {
  account_plan_id       Int                     @id @default(autoincrement())
  plan_name             String                  @db.VarChar(100)
  plan_description      String?
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  account_entries       account_entries[]
  license_account_plans license_account_plans[]
}

model accounts {
  account_id       Int             @id @default(autoincrement())
  account_name     String          @db.VarChar(100)
  account_type     String          @db.VarChar(20)
  account_balance  Decimal?        @default(0) @db.Decimal(12, 2)
  license_id       Int
  account_entry_id Int
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  account_entries  account_entries @relation(fields: [account_entry_id], references: [account_entry_id], onDelete: SetNull, onUpdate: NoAction, map: "fk_account_entry")
  licenses         licenses        @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
  credit_cards     credit_cards[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model addresses {
  address_id   Int     @id @default(autoincrement())
  person_id    Int     @unique(map: "addresses_person_id_unique")
  street       String  @db.VarChar(100)
  number       String  @db.VarChar(20)
  complement   String? @db.VarChar(50)
  neighborhood String? @db.VarChar(50)
  city         String  @db.VarChar(50)
  state        String  @db.VarChar(2)
  postal_code  String  @db.VarChar(10)
  country      String  @default("Brasil") @db.VarChar(50)
  reference    String? @db.VarChar(100)
  ibge         Int?
  persons      persons @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([person_id, street, number, city, state, postal_code, reference], map: "addresses_unique_idx")
}

model bank_accounts {
  bank_account_id      Int                    @id @default(autoincrement())
  bank_name            String                 @db.VarChar(100)
  agency_number        String                 @db.VarChar(20)
  account_number       String                 @db.VarChar(20)
  account_entry_id     Int?
  license_id           Int?
  account_entries      account_entries?       @relation(fields: [account_entry_id], references: [account_entry_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_account_entry")
  licenses             licenses?              @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
  installment_payments installment_payments[]
  payment_methods      payment_methods[]
  payment_splits       payment_splits[]
}

model boleto_webhook_responses {
  webhook_id         Int       @id @default(autoincrement())
  boleto_id          Int?
  external_boleto_id String?   @db.VarChar(50)
  webhook_data       Json
  processed_status   String?   @default("Pendente") @db.VarChar(20)
  received_at        DateTime? @default(now()) @db.Timestamp(6)
  processed_at       DateTime? @db.Timestamp(6)
  error_message      String?
  boletos            boletos?  @relation(fields: [boleto_id], references: [boleto_id], onDelete: Cascade, map: "fk_boleto_webhook")
}

model boletos {
  boleto_id                Int                        @id @default(autoincrement())
  installment_id           Int
  boleto_number            String?                    @db.VarChar(50)
  boleto_url               String?                    @db.VarChar(255)
  generated_at             DateTime?                  @default(now()) @db.Timestamp(6)
  status                   String?                    @db.VarChar(20)
  codigo_barras            String?                    @db.VarChar(255)
  linha_digitavel          String?                    @db.VarChar(255)
  pix_copia_e_cola         String?                    @db.VarChar(1024)
  last_status_update       DateTime?                  @default(now()) @db.Timestamp(6)
  external_boleto_id       String?                    @unique(map: "unique_integration_id") @db.VarChar(255)
  boleto_webhook_responses boleto_webhook_responses[]
  installments             installments               @relation(fields: [installment_id], references: [installment_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_installment")
  boletos_history          boletos_history[]
}

model boletos_history {
  boleto_history_id Int       @id @default(autoincrement())
  boleto_id         Int
  status            String    @db.VarChar(20)
  status_details    String?
  changed_at        DateTime? @default(now()) @db.Timestamp(6)
  boletos           boletos   @relation(fields: [boleto_id], references: [boleto_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_boleto")
}

model chat_channels {
  channel_id   Int       @id @default(autoincrement())
  channel_name String    @unique @db.VarChar(50)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  chats        chats[]

  @@index([channel_name], map: "idx_chat_channels_channel_name")
}

model chat_messages {
  message_id   Int       @id @default(autoincrement())
  chat_id      Int
  content      String
  sent_at      DateTime? @default(now()) @db.Timestamp(6)
  delivered_at DateTime? @db.Timestamp(6)
  read_at      DateTime? @db.Timestamp(6)
  chats        chats     @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)

  @@index([chat_id], map: "idx_chat_messages_chat_id")
}

model chat_person {
  chat_id    Int
  contact_id Int
  chats      chats    @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  contacts   contacts @relation(fields: [contact_id], references: [contact_id], onDelete: Cascade)

  @@id([chat_id, contact_id])
  @@index([chat_id], map: "idx_chat_person_chat_id")
  @@index([contact_id], map: "idx_chat_person_contact_id")
}

model chat_types {
  chat_type_id Int       @id @default(autoincrement())
  description  String    @unique @db.VarChar(100)
  category     String?   @db.VarChar(50)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  chats        chats[]

  @@index([category], map: "idx_chat_types_category")
}

model chats {
  chat_id       Int             @id @default(autoincrement())
  subject       String          @db.VarChar(255)
  chat_type_id  Int
  channel_id    Int
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  chat_messages chat_messages[]
  chat_person   chat_person[]
  chat_channels chat_channels   @relation(fields: [channel_id], references: [channel_id])
  chat_types    chat_types      @relation(fields: [chat_type_id], references: [chat_type_id])

  @@index([channel_id], map: "idx_chats_channel_id")
  @@index([chat_type_id], map: "idx_chats_chat_type_id")
}

model cnae {
  cnae_id     Int           @id @default(autoincrement())
  code        String        @unique(map: "cnae_code_idx") @db.VarChar(20)
  description String        @db.VarChar(255)
  person_cnae person_cnae[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model contact_types {
  contact_type_id Int        @id @default(autoincrement())
  description     String     @unique(map: "contact_types_description_unique") @db.VarChar(50)
  contacts        contacts[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model contacts {
  contact_id                                      Int               @id @default(autoincrement())
  contact_type_id                                 Int
  contact_value                                   String            @db.VarChar(100)
  contact_name                                    String?           @db.VarChar(150)
  chat_person                                     chat_person[]
  contact_types                                   contact_types     @relation(fields: [contact_type_id], references: [contact_type_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_contact_type")
  messages_messages_receiver_contact_idTocontacts messages[]        @relation("messages_receiver_contact_idTocontacts")
  messages_messages_sender_contact_idTocontacts   messages[]        @relation("messages_sender_contact_idTocontacts")
  person_contacts                                 person_contacts[]
}

model contract_adjustment_history {
  adjustment_history_id Int                 @id @default(autoincrement())
  contract_id           Int
  previous_value        Decimal?            @db.Decimal(10, 2)
  new_value             Decimal?            @db.Decimal(10, 2)
  change_date           DateTime?           @default(now()) @db.Timestamp(6)
  change_type           String?             @db.VarChar(50)
  changed_by            Int?
  contracts_recurring   contracts_recurring @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
}

model contract_adjustments {
  adjustment_id       Int                 @id @default(autoincrement())
  contract_id         Int
  adjustment_type     String?             @db.VarChar(50)
  adjustment_value    Decimal?            @db.Decimal(10, 2)
  adjustment_date     DateTime?           @db.Date
  movement_id         Int?
  contracts_recurring contracts_recurring @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
  movements           movements?          @relation(fields: [movement_id], references: [movement_id], onDelete: NoAction, onUpdate: NoAction)
}

model contract_billing_logs {
  log_id        Int       @id @default(autoincrement())
  contract_id   Int?
  movement_id   Int?
  log_message   String?
  log_timestamp DateTime? @default(now()) @db.Timestamp(6)
}

model contract_extra_services {
  extra_service_id    Int                 @id @default(autoincrement())
  contract_id         Int
  service_id          Int
  item_description    String
  item_value          Decimal             @db.Decimal(10, 2)
  service_date        DateTime            @db.Date
  movement_id         Int?
  contracts_recurring contracts_recurring @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
  movements           movements?          @relation(fields: [movement_id], references: [movement_id], onDelete: NoAction, onUpdate: NoAction)
}

model contract_group_licenses {
  contract_group_id Int
  license_id        Int
  contract_groups   contract_groups @relation(fields: [contract_group_id], references: [contract_group_id], onDelete: Cascade, map: "fk_contract_group")
  licenses          licenses        @relation(fields: [license_id], references: [license_id], onDelete: Cascade, map: "fk_license")

  @@id([contract_group_id, license_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model contract_groups {
  contract_group_id        Int                       @id @default(autoincrement())
  group_name               String                    @db.VarChar(100)
  group_description        String?
  has_decimo_terceiro      Boolean                   @default(false)
  vencimento1_dia          Int?                      @db.SmallInt
  vencimento1_mes          Int?                      @db.SmallInt
  vencimento2_dia          Int?                      @db.SmallInt
  vencimento2_mes          Int?                      @db.SmallInt
  decimo_payment_method_id Int?                      @default(4)
  contract_group_licenses  contract_group_licenses[]
  payment_methods          payment_methods?          @relation(fields: [decimo_payment_method_id], references: [payment_method_id], onDelete: SetDefault, onUpdate: NoAction, map: "fk_decimo_payment_method")
  contracts_recurring      contracts_recurring[]
}

model contract_movements {
  contract_id         Int
  movement_id         Int
  contracts_recurring contracts_recurring @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
  movements           movements           @relation(fields: [movement_id], references: [movement_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([contract_id, movement_id])
}

model contracts_recurring {
  contract_name               String?                       @db.VarChar(255)
  contract_value              Decimal                       @db.Decimal(10, 2)
  start_date                  DateTime                      @db.Date
  end_date                    DateTime?                     @db.Date
  recurrence_period           String                        @db.VarChar(50)
  due_day                     Int
  days_before_due             Int?                          @default(0)
  status                      String?                       @default("active") @db.VarChar(20)
  model_movement_id           Int?
  last_billing_date           DateTime?                     @db.Date
  next_billing_date           DateTime?                     @db.Date
  contract_id                 Int                           @id @default(autoincrement())
  contract_group_id           Int?
  billing_reference           String                        @default("current") @db.VarChar(20)
  representative_person_id    Int?
  commissioned_value          Decimal?                      @db.Decimal(10, 2)
  account_entry_id            Int?
  last_decimo_billing_year    Int?
  contract_adjustment_history contract_adjustment_history[]
  contract_adjustments        contract_adjustments[]
  contract_extra_services     contract_extra_services[]
  contract_movements          contract_movements[]
  account_entries             account_entries?              @relation(fields: [account_entry_id], references: [account_entry_id])
  contract_groups             contract_groups?              @relation(fields: [contract_group_id], references: [contract_group_id])
  movements                   movements?                    @relation(fields: [model_movement_id], references: [movement_id], onDelete: NoAction, onUpdate: NoAction)
  persons                     persons?                      @relation(fields: [representative_person_id], references: [person_id], map: "contracts_recurring_person_id_fkey")

  @@index([contract_group_id], map: "idx_contracts_recurring_contract_group_id")
}

model credit_cards {
  credit_card_id Int      @id @default(autoincrement())
  account_id     Int
  credit_limit   Decimal  @db.Decimal(12, 2)
  closing_date   DateTime @db.Date
  accounts       accounts @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_account")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model document_types {
  document_type_id          Int                         @id @default(autoincrement())
  description               String                      @unique(map: "document_types_description_unique") @db.VarChar(50)
  person_documents          person_documents[]
  person_type_document_type person_type_document_type[]
}

model entity_types {
  entity_type_id       Int                    @id @default(autoincrement())
  entity_name          String                 @unique @db.VarChar(50)
  integration_mappings integration_mappings[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model holidays_br {
  holiday_id   Int     @id @default(autoincrement())
  name         String
  description  String?
  day          Int?    @db.SmallInt
  month        Int?    @db.SmallInt
  year         Int?    @db.SmallInt
  holiday_type String  @db.VarChar(20)
  state_code   String? @db.Char(2)
  city         String?

  @@index([city], map: "idx_holidays_br_city")
  @@index([day, month, year], map: "idx_holidays_br_date")
  @@index([state_code], map: "idx_holidays_br_state")
  @@index([holiday_type], map: "idx_holidays_br_type")
}

model installment_payments {
  installment_payment_id Int            @id @default(autoincrement())
  installment_id         Int
  payment_date           DateTime       @db.Date
  paid_amount            Decimal        @db.Decimal(10, 2)
  interest_amount        Decimal?       @default(0.00) @db.Decimal(10, 2)
  discount_amount        Decimal?       @default(0.00) @db.Decimal(10, 2)
  bank_account_id        Int?
  bank_accounts          bank_accounts? @relation(fields: [bank_account_id], references: [bank_account_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bank_account")
  installments           installments   @relation(fields: [installment_id], references: [installment_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_installment")
}

model installments {
  installment_id       Int                    @id @default(autoincrement())
  payment_id           Int
  installment_number   String                 @db.VarChar(10)
  due_date             DateTime               @db.Date
  amount               Decimal                @db.Decimal(10, 2)
  balance              Decimal                @db.Decimal(10, 2)
  status               String                 @db.VarChar(20)
  account_entry_id     Int
  expected_date        DateTime?              @db.Date
  boletos              boletos[]
  installment_payments installment_payments[]
  account_entries      account_entries        @relation(fields: [account_entry_id], references: [account_entry_id], onDelete: SetNull, onUpdate: NoAction, map: "fk_account_entry")
  receipts             receipts[]
}

model integration_credentials {
  credential_id    Int               @id @default(autoincrement())
  integration_id   Int?
  license_id       Int?
  client_id        String            @db.VarChar(255)
  client_secret    String            @db.VarChar(255)
  scope            String?           @db.VarChar(255)
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  updated_at       DateTime?         @default(now()) @db.Timestamp(6)
  certificate_data String?
  key_data         String?
  integrations     integrations?     @relation(fields: [integration_id], references: [integration_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_integration")
  licenses         licenses?         @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
  payment_methods  payment_methods[]
  temporary_tokens temporary_tokens?
}

model integration_mappings {
  mapping_id      Int               @id @default(autoincrement())
  integration_id  Int?
  entity_type     String            @db.VarChar(50)
  entity_id       Int
  external_id     String            @db.VarChar(255)
  external_data   Json?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  entity_type_id  Int?
  entity_types    entity_types?     @relation(fields: [entity_type_id], references: [entity_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_entity_type")
  integrations    integrations?     @relation(fields: [integration_id], references: [integration_id], onDelete: NoAction, onUpdate: NoAction)
  payment_methods payment_methods[]
}

model integrations {
  integration_id          Int                       @id @default(autoincrement())
  system_name             String                    @db.VarChar(255)
  system_description      String?
  api_endpoint            String?                   @db.VarChar(255)
  authentication_method   String?                   @db.VarChar(50)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  is_global               Boolean?                  @default(true)
  integration_credentials integration_credentials[]
  integration_mappings    integration_mappings[]
  invoice                 invoice[]
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model invoice {
  invoice_id     Int              @id(map: "nota_fiscal_pkey") @default(autoincrement())
  reference_id   String           @db.VarChar(100)
  number         String?          @db.VarChar(50)
  series         String?          @db.VarChar(20)
  status         String?          @db.VarChar(20)
  environment    String?          @db.VarChar(20)
  pdf_url        String?
  xml_url        String?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  movement_id    Int
  integration_id Int?             @default(10)
  integrations   integrations?    @relation(fields: [integration_id], references: [integration_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_integration")
  movements      movements        @relation(fields: [movement_id], references: [movement_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movement")
  invoice_events invoice_events[]
}

model invoice_events {
  event_id   Int       @id @default(autoincrement())
  invoice_id Int
  event_type String    @db.VarChar(50)
  event_date DateTime? @default(now()) @db.Timestamp(6)
  event_data Json?
  status     String?   @db.VarChar(20)
  message    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  invoice    invoice   @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_invoice")
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model items {
  item_id     Int       @id @unique(map: "unique_item_id") @default(autoincrement())
  code        String    @db.VarChar(50)
  name        String    @db.VarChar(255)
  description String?
  status      String?   @default("active") @db.VarChar(20)
  price       Decimal   @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  active      Boolean   @default(true)
  deleted_at  DateTime? @db.Timestamp(6)
}

model license_account_plans {
  license_id      Int
  account_plan_id Int
  account_plans   account_plans @relation(fields: [account_plan_id], references: [account_plan_id], onDelete: Cascade, onUpdate: NoAction)
  licenses        licenses      @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([license_id, account_plan_id])
}

model license_api_chat {
  license_api_chat_id Int       @id @default(autoincrement())
  license_id          Int
  instance_name       String    @db.VarChar(255)
  api_url             String
  api_key             String    @db.VarChar(255)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  licenses            licenses  @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
}

model licenses {
  license_id                   Int                            @id @unique(map: "licenses_license_id_unique") @default(autoincrement())
  person_id                    Int                            @unique(map: "idx_license_person")
  license_name                 String                         @db.VarChar(100)
  start_date                   DateTime                       @db.Date
  end_date                     DateTime?                      @db.Date
  status                       String                         @default("Ativa") @db.VarChar(20)
  timezone                     String?                        @db.VarChar(50)
  active                       Boolean                        @default(true)
  account_movements            account_movements[]
  accounts                     accounts[]
  bank_accounts                bank_accounts[]
  contract_group_licenses      contract_group_licenses[]
  integration_credentials      integration_credentials[]
  license_account_plans        license_account_plans[]
  license_api_chat             license_api_chat[]
  persons                      persons                        @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person")
  movement_templates           movement_templates[]
  movements                    movements[]
  payment_license_relationship payment_license_relationship[]
  person_license               person_license[]
  user_license                 user_license[]
  user_roles                   user_roles[]
}

model message_attachments {
  attachment_id Int      @id @default(autoincrement())
  message_id    Int
  file_path     String   @db.VarChar(255)
  file_type     String?  @db.VarChar(50)
  messages      messages @relation(fields: [message_id], references: [message_id], onDelete: NoAction, onUpdate: NoAction)
}

model message_channels {
  channel_id   Int        @id @default(autoincrement())
  channel_name String     @unique @db.VarChar(50)
  messages     messages[]
}

model message_directions {
  direction_id   Int        @id @default(autoincrement())
  direction_name String     @unique @db.VarChar(20)
  messages       messages[]
}

model message_entities {
  message_entity_id Int        @id @default(autoincrement())
  entity_name       String     @unique @db.VarChar(50)
  messages          messages[]
}

model message_logs {
  log_id           Int              @id @default(autoincrement())
  message_id       Int
  status_id        Int
  occurred_at      DateTime?        @default(now()) @db.Timestamp(6)
  message_statuses message_statuses @relation(fields: [status_id], references: [status_id], onDelete: Cascade, map: "fk_status")
}

model message_status {
  status_id   Int        @id @default(autoincrement())
  status_name String     @unique @db.VarChar(50)
  messages    messages[]
}

model message_statuses {
  status_id    Int            @id @default(autoincrement())
  status_name  String         @unique(map: "message_statuses_name_unique") @db.VarChar(50)
  message_logs message_logs[]
}

model message_templates {
  template_id      Int       @id @default(autoincrement())
  chat_type_id     Int       @unique(map: "unique_message_type_id")
  template_content String
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  subject          String?
}

model messages {
  message_id                                      Int                   @id @default(autoincrement())
  channel_id                                      Int
  direction_id                                    Int
  content                                         String
  timestamp                                       DateTime              @default(now()) @db.Timestamp(6)
  sender_contact_id                               Int
  receiver_contact_id                             Int
  message_entity_id                               Int?
  related_entity_id                               Int?
  status_id                                       Int?
  message_attachments                             message_attachments[]
  message_channels                                message_channels      @relation(fields: [channel_id], references: [channel_id], onDelete: NoAction, onUpdate: NoAction)
  message_directions                              message_directions    @relation(fields: [direction_id], references: [direction_id], onDelete: NoAction, onUpdate: NoAction)
  message_entities                                message_entities?     @relation(fields: [message_entity_id], references: [message_entity_id], onDelete: NoAction, onUpdate: NoAction)
  contacts_messages_receiver_contact_idTocontacts contacts              @relation("messages_receiver_contact_idTocontacts", fields: [receiver_contact_id], references: [contact_id], onDelete: NoAction, onUpdate: NoAction)
  contacts_messages_sender_contact_idTocontacts   contacts              @relation("messages_sender_contact_idTocontacts", fields: [sender_contact_id], references: [contact_id], onDelete: NoAction, onUpdate: NoAction)
  message_status                                  message_status?       @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction)
}

model movement_items {
  movement_item_id                                           Int            @id @default(autoincrement())
  movement_id                                                Int
  item_id                                                    Int
  quantity                                                   Decimal        @db.Decimal(10, 2)
  unit_price                                                 Decimal        @db.Decimal(10, 2)
  total_price                                                Decimal        @db.Decimal(10, 2)
  salesperson_id                                             Int?
  technician_id                                              Int?
  description                                                String?
  movements                                                  movements      @relation(fields: [movement_id], references: [movement_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movement")
  user_accounts_movement_items_salesperson_idTouser_accounts user_accounts? @relation("movement_items_salesperson_idTouser_accounts", fields: [salesperson_id], references: [user_id], map: "fk_salesperson_id")
  user_accounts_movement_items_technician_idTouser_accounts  user_accounts? @relation("movement_items_technician_idTouser_accounts", fields: [technician_id], references: [user_id], map: "fk_technician_id")
}

model movement_payments {
  payment_id        Int             @id @default(autoincrement())
  movement_id       Int
  payment_method_id Int
  total_amount      Decimal         @db.Decimal(10, 2)
  status            String?         @default("Pendente") @db.VarChar(20)
  movements         movements       @relation(fields: [movement_id], references: [movement_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movement")
  payment_methods   payment_methods @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_method")
}

model movement_status {
  status_id   Int       @id @default(autoincrement())
  status_name String    @db.VarChar(50)
  description String?
  is_final    Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  order       Int?
}

model movement_status_categories {
  status_category_id Int                 @id @default(autoincrement())
  category_name      String              @unique @db.VarChar(50)
  movement_statuses  movement_statuses[]
}

model movement_status_history {
  history_id         Int               @id @default(autoincrement())
  movement_id        Int
  movement_status_id Int
  changed_at         DateTime?         @default(now()) @db.Timestamptz(6)
  changed_by         String?           @db.VarChar(255)
  movements          movements         @relation(fields: [movement_id], references: [movement_id], onDelete: Cascade, onUpdate: NoAction)
  movement_statuses  movement_statuses @relation(fields: [movement_status_id], references: [movement_status_id], onDelete: NoAction, onUpdate: NoAction)
}

model movement_statuses {
  movement_status_id         Int                        @id @default(autoincrement())
  status_name                String                     @db.VarChar(50)
  description                String?
  status_category_id         Int
  movement_type_id           Int
  is_final                   Boolean?                   @default(false)
  display_order              Int?
  movement_status_history    movement_status_history[]
  movement_types             movement_types             @relation(fields: [movement_type_id], references: [movement_type_id], onDelete: NoAction, onUpdate: NoAction)
  movement_status_categories movement_status_categories @relation(fields: [status_category_id], references: [status_category_id], onDelete: NoAction, onUpdate: NoAction)
  movements                  movements[]

  @@unique([status_name, movement_type_id], map: "movement_statuses_status_type_unique")
}

model movement_templates {
  template_id       Int              @id @default(autoincrement())
  template_name     String           @db.VarChar(255)
  movement_type     String           @db.VarChar(50)
  person_id         Int?
  license_id        Int              @default(1)
  payment_method_id Int?
  total_value       Decimal?         @default(0.00) @db.Decimal(15, 2)
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  updated_at        DateTime?        @default(now()) @db.Timestamp(6)
  generate_nfse     Boolean?         @default(false)
  generate_boleto   Boolean?         @default(false)
  default_discount  Decimal?         @default(0.00) @db.Decimal(15, 2)
  default_addition  Decimal?         @default(0.00) @db.Decimal(15, 2)
  active            Boolean?         @default(true)
  service_id        Int              @default(1)
  movement_date     DateTime?        @db.Date
  vencimento_date   DateTime?        @db.Date
  notifica          Boolean?         @default(true)
  description       String?
  licenses          licenses         @relation(fields: [license_id], references: [license_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_license")
  payment_methods   payment_methods? @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_method")
  persons           persons?         @relation(fields: [person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person")

  @@index([template_name], map: "idx_movement_templates_name")
  @@index([movement_type], map: "idx_movement_templates_type")
}

model movement_types {
  movement_type_id  Int                 @id @default(autoincrement())
  type_name         String              @unique @db.VarChar(50)
  movement_statuses movement_statuses[]
  movements         movements[]
}

model movements {
  movement_id             Int                       @id @default(autoincrement())
  movement_type           String?                   @db.VarChar(10)
  movement_date           DateTime                  @db.Date
  person_id               Int
  total_amount            Decimal                   @db.Decimal(10, 2)
  license_id              Int
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  discount                Decimal?                  @default(0.00) @db.Decimal(15, 2)
  addition                Decimal?                  @default(0.00) @db.Decimal(15, 2)
  total_items             Decimal?                  @default(0.00) @db.Decimal(15, 2)
  status_id               Int?
  payment_method_id       Int?
  description             String?
  movement_type_id        Int?
  movement_status_id      Int?
  is_template             Boolean?                  @default(false)
  contract_adjustments    contract_adjustments[]
  contract_extra_services contract_extra_services[]
  contract_movements      contract_movements[]
  contracts_recurring     contracts_recurring[]
  invoice                 invoice[]
  movement_items          movement_items[]
  movement_payments       movement_payments[]
  movement_status_history movement_status_history[]
  licenses                licenses                  @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
  persons                 persons                   @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person")
  movement_statuses       movement_statuses?        @relation(fields: [movement_status_id], references: [movement_status_id], onDelete: NoAction, onUpdate: NoAction)
  movement_types          movement_types?           @relation(fields: [movement_type_id], references: [movement_type_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([movement_date], map: "idx_movements_date")
  @@index([license_id], map: "idx_movements_license")
  @@index([person_id], map: "idx_movements_person")
}

model n8n_chat_histories {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

model n8n_fluxo {
  id         BigInt    @id
  message    String?
  convid     String?
  created_at DateTime? @db.Timestamptz(6)
}

model nfce {
  invoice_id     Int       @id
  reference_id   String    @db.VarChar(100)
  number         String?   @db.VarChar(50)
  series         String?   @db.VarChar(20)
  status         String?   @db.VarChar(20)
  environment    String?   @db.VarChar(20)
  pdf_url        String?
  xml_url        String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  movement_id    Int
  integration_id Int?      @default(10)
  qr_code        String?
}

model nfe {
  invoice_id     Int       @id @default(autoincrement())
  reference_id   String    @db.VarChar(100)
  number         String?   @db.VarChar(50)
  series         String?   @db.VarChar(20)
  status         String?   @db.VarChar(20)
  environment    String?   @db.VarChar(20)
  pdf_url        String?
  xml_url        String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  movement_id    Int
  integration_id Int?      @default(10)
  access_key     String?   @db.VarChar(44)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model nfse {
  invoice_id          Int       @default(autoincrement())
  reference_id        String    @default(dbgenerated("10")) @db.VarChar(100)
  number              String?   @db.VarChar(50)
  series              String?   @db.VarChar(20)
  status              String?   @db.VarChar(20)
  environment         String?   @db.VarChar(20)
  pdf_url             String?
  xml_url             String?
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  movement_id         Int       @default(10)
  integration_id      Int?      @default(10)
  integration_nfse_id String?   @db.VarChar(100)

  @@ignore
}

model nota_fiscal_eventos {
  evento_id      Int       @id @default(autoincrement())
  nota_fiscal_id Int
  tipo_evento    String    @db.VarChar(50)
  data_evento    DateTime? @default(now()) @db.Timestamp(6)
  dados_evento   Json?
  status         String?   @db.VarChar(20)
}

model payment_document_types {
  document_type_id Int               @id @default(autoincrement())
  document_name    String            @db.VarChar(50)
  description      String?
  payment_methods  payment_methods[]
}

model payment_license_relationship {
  payment_license_id Int             @id @default(autoincrement())
  payment_method_id  Int
  license_id         Int
  created_at         DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?       @default(now()) @db.Timestamptz(6)
  licenses           licenses        @relation(fields: [license_id], references: [license_id], onDelete: Cascade, map: "fk_license")
  payment_methods    payment_methods @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade, map: "fk_payment_method")

  @@unique([payment_method_id, license_id], map: "uq_payment_license")
  @@index([license_id], map: "idx_payment_license_license_id")
  @@index([payment_method_id], map: "idx_payment_license_payment_method_id")
}

model payment_methods {
  payment_method_id            Int                            @id @default(autoincrement())
  method_name                  String                         @db.VarChar(50)
  description                  String?
  has_entry                    Boolean?                       @default(false)
  installment_count            Int?                           @default(1)
  days_between_installments    Int?                           @default(30)
  first_due_date_days          Int?                           @default(30)
  account_entry_id             Int?
  integration_mapping_id       Int?
  payment_document_type_id     Int?
  credential_id                Int?
  bank_account_id              Int?
  active                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now()) @db.Timestamp(6)
  updated_at                   DateTime                       @default(now()) @db.Timestamp(6)
  deleted_at                   DateTime?                      @db.Timestamp(6)
  contract_groups              contract_groups[]
  movement_payments            movement_payments[]
  movement_templates           movement_templates[]
  payment_license_relationship payment_license_relationship[]
  account_entries              account_entries?               @relation(fields: [account_entry_id], references: [account_entry_id], onUpdate: NoAction, map: "fk_account_entry")
  bank_accounts                bank_accounts?                 @relation(fields: [bank_account_id], references: [bank_account_id], onUpdate: NoAction, map: "fk_bank_account")
  integration_credentials      integration_credentials?       @relation(fields: [credential_id], references: [credential_id], onUpdate: NoAction, map: "fk_credential")
  integration_mappings         integration_mappings?          @relation(fields: [integration_mapping_id], references: [mapping_id], onUpdate: NoAction, map: "fk_integration_mapping")
  payment_document_types       payment_document_types?        @relation(fields: [payment_document_type_id], references: [document_type_id], onUpdate: NoAction, map: "fk_payment_document_type")
  payment_splits               payment_splits[]
}

model payment_splits {
  split_id             Int             @id @default(autoincrement())
  payment_method_id    Int
  recipient_account_id Int
  split_percentage     Decimal         @db.Decimal(5, 2)
  split_amount         Decimal?        @db.Decimal(10, 2)
  created_at           DateTime?       @default(now()) @db.Timestamp(6)
  updated_at           DateTime?       @default(now()) @db.Timestamp(6)
  payment_methods      payment_methods @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_method")
  bank_accounts        bank_accounts   @relation(fields: [recipient_account_id], references: [bank_account_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_recipient_account")
}

model person_cnae {
  person_id  Int
  cnae_id    Int
  is_primary Boolean @default(false)
  cnae       cnae    @relation(fields: [cnae_id], references: [cnae_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cnae")
  persons    persons @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person")

  @@id([person_id, cnae_id])
  @@unique([person_id, cnae_id], map: "person_cnae_unique")
}

model person_contact_group {
  group_id                            Int                                   @id @default(autoincrement())
  group_name                          String                                @unique(map: "person_contact_group_group_name_unique") @db.VarChar(255)
  created_at                          DateTime?                             @default(now()) @db.Timestamp(6)
  updated_at                          DateTime?                             @default(now()) @db.Timestamp(6)
  person_contact_person_contact_group person_contact_person_contact_group[]
}

model person_contact_person_contact_group {
  person_contact_id    Int
  group_id             Int
  created_at           DateTime?            @default(now()) @db.Timestamp(6)
  person_contact_group person_contact_group @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  person_contacts      person_contacts      @relation(fields: [person_contact_id], references: [person_contact_id], onDelete: Cascade)

  @@id([person_contact_id, group_id])
}

model person_contacts {
  person_id                           Int
  contact_id                          Int
  person_contact_id                   Int                                   @unique(map: "person_contacts_id_key") @default(autoincrement())
  person_contact_person_contact_group person_contact_person_contact_group[]
  contacts                            contacts                              @relation(fields: [contact_id], references: [contact_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_contact")
  persons                             persons                               @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person")

  @@unique([person_id, contact_id], map: "person_contacts_unique_idx")
}

model person_documents {
  person_document_id Int            @id @default(autoincrement())
  person_id          Int
  document_type_id   Int
  document_value     String         @db.VarChar(50)
  document_types     document_types @relation(fields: [document_type_id], references: [document_type_id], onDelete: Cascade, onUpdate: NoAction)
  persons            persons        @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([person_id, document_type_id, document_value], map: "person_documents_unique_idx")
}

model person_license {
  person_id  Int
  license_id Int
  licenses   licenses @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_license")
  persons    persons  @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person")

  @@unique([person_id, license_id], map: "person_license_unique_idx")
}

model person_pix_keys {
  pix_key_id      Int           @id @default(autoincrement())
  person_id       Int
  pix_key_value   String        @db.VarChar(255)
  pix_key_type_id Int
  is_preferred    Boolean?      @default(false)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  persons         persons       @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction)
  pix_key_types   pix_key_types @relation(fields: [pix_key_type_id], references: [pix_key_type_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([person_id, pix_key_value, pix_key_type_id], map: "unique_person_key")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model person_qsa {
  juridical_person_id                             Int
  physical_person_id                              Int
  participation                                   Decimal? @db.Decimal(5, 2)
  administrator                                   Boolean  @default(false)
  persons_person_qsa_juridical_person_idTopersons persons  @relation("person_qsa_juridical_person_idTopersons", fields: [juridical_person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_juridical_person")
  persons_person_qsa_physical_person_idTopersons  persons  @relation("person_qsa_physical_person_idTopersons", fields: [physical_person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_physical_person")

  @@id([juridical_person_id, physical_person_id])
  @@unique([juridical_person_id, physical_person_id], map: "person_qsa_unique_idx")
}

model person_tax_regimes {
  person_id     Int
  tax_regime_id Int
  start_date    DateTime?   @db.Date
  persons       persons     @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction)
  tax_regimes   tax_regimes @relation(fields: [tax_regime_id], references: [tax_regime_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([person_id, tax_regime_id])
}

model person_type_document_type {
  person_type_id   Int
  document_type_id Int
  document_types   document_types @relation(fields: [document_type_id], references: [document_type_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_document_type")
  person_types     person_types   @relation(fields: [person_type_id], references: [person_type_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_type")

  @@id([person_type_id, document_type_id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model person_types {
  person_type_id            Int                         @id @default(autoincrement())
  description               String                      @unique(map: "person_types_description_unique") @db.VarChar(50)
  person_type_document_type person_type_document_type[]
  persons                   persons[]
}

model person_wyse {
  id        Int      @id @default(autoincrement())
  person_id Int?
  wyse_id   Int      @unique
  persons   persons? @relation(fields: [person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model persons {
  person_id                                          Int                   @id @default(autoincrement())
  full_name                                          String                @db.VarChar(255)
  birth_date                                         DateTime?             @db.Date
  person_type_id                                     Int?
  created_at                                         DateTime?             @default(now()) @db.Timestamp(6)
  fantasy_name                                       String?               @db.VarChar(255)
  social_capital                                     Decimal?              @db.Decimal(15, 2)
  updated_at                                         DateTime?             @default(now()) @db.Timestamp(6)
  addresses                                          addresses?
  contracts_recurring                                contracts_recurring[]
  licenses                                           licenses?
  movement_templates                                 movement_templates[]
  movements                                          movements[]
  person_cnae                                        person_cnae[]
  person_contacts                                    person_contacts[]
  person_documents                                   person_documents[]
  person_license                                     person_license[]
  person_pix_keys                                    person_pix_keys[]
  person_qsa_person_qsa_juridical_person_idTopersons person_qsa[]          @relation("person_qsa_juridical_person_idTopersons")
  person_qsa_person_qsa_physical_person_idTopersons  person_qsa[]          @relation("person_qsa_physical_person_idTopersons")
  person_tax_regimes                                 person_tax_regimes[]
  person_wyse                                        person_wyse[]
  person_types                                       person_types?         @relation(fields: [person_type_id], references: [person_type_id], onUpdate: NoAction)
  user_accounts                                      user_accounts?

  @@index([fantasy_name], map: "idx_persons_fantasy_name")
  @@index([full_name], map: "idx_persons_full_name")
}

model pix_key_types {
  pix_key_type_id Int               @id @default(autoincrement())
  description     String            @unique @db.VarChar(50)
  person_pix_keys person_pix_keys[]
}

model product_groups {
  product_group_id Int         @id @default(autoincrement())
  description      String      @db.VarChar(100)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  updated_at       DateTime?   @default(now()) @db.Timestamp(6)
  products         products[]  @ignore
}

model service_groups {
  service_group_id         Int                   @id @default(autoincrement())
  description             String                 @db.VarChar(100)
  service_municipality_id  Int?
  service_municipality    service_municipality? @relation(fields: [service_municipality_id], references: [service_municipality_id], onUpdate: NoAction, map: "fk_service_municipality")
  services                services[]            @ignore
}

model service_lc116 {
  service_lc116_id     Int                    @id @default(autoincrement())
  code                 String                 @db.VarChar(10)
  description          String
  cnae                 String?                @db.VarChar(10)
  service_municipality service_municipality[]
}

model service_municipality {
  service_municipality_id Int              @id @default(autoincrement())
  ctribmun                String           @db.VarChar(20)
  municipality_name       String           @db.VarChar(255)
  service_lc116_id        Int?
  created_at              DateTime?        @default(now()) @db.Timestamp(6)
  updated_at              DateTime?        @default(now()) @db.Timestamp(6)
  ibge_code               String?          @db.VarChar(20)
  service_groups          service_groups[]
  service_lc116           service_lc116?   @relation(fields: [service_lc116_id], references: [service_lc116_id], onUpdate: NoAction, map: "fk_service_lc116")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model services {
  item_id          Int             @default(autoincrement())
  code             String          @db.VarChar(50)
  name             String          @db.VarChar(255)
  description      String?
  status           String?         @default("active") @db.VarChar(20)
  price            Decimal         @db.Decimal(10, 2)
  created_at       DateTime?       @default(now()) @db.Timestamp(6)
  updated_at       DateTime?       @default(now()) @db.Timestamp(6)
  service_group_id Int?
  active           Boolean         @default(true)
  deleted_at       DateTime?       @db.Timestamp(6)
  service_groups   service_groups? @relation(fields: [service_group_id], references: [service_group_id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model system_default_accounts {
  default_account_id Int             @id @default(autoincrement())
  account_type       String          @db.VarChar(50)
  account_entry_id   Int
  description        String?
  created_at         DateTime?       @default(now()) @db.Timestamp(6)
  account_entries    account_entries @relation(fields: [account_entry_id], references: [account_entry_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_account_entry")
}

model system_features {
  feature_id          Int                   @id @default(autoincrement())
  feature_name        String                @unique @db.VarChar(100)
  feature_description String?
  profile_permissions profile_permissions[]
}

model system_parameters {
  parameter_id   Int       @id @default(autoincrement())
  category       String    @db.VarChar(50)
  subcategory    String?   @db.VarChar(50)
  value          Decimal   @db.Decimal(5, 2)
  effective_date DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  expiry_date    DateTime? @db.Date

  @@unique([category, subcategory, effective_date])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model tax_regimes {
  tax_regime_id      Int                  @id @default(autoincrement())
  description        String               @unique(map: "tax_regimes_description_unique") @db.VarChar(100)
  person_tax_regimes person_tax_regimes[]
}

model temporary_tokens {
  id                      Int                     @id @default(autoincrement())
  token                   String
  generated_at            DateTime                @default(now()) @db.Timestamp(6)
  expires_at              DateTime                @db.Timestamp(6)
  credential_id           Int                     @unique(map: "unique_credential_id")
  expires_in_seconds      Int?
  integration_credentials integration_credentials @relation(fields: [credential_id], references: [credential_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_credential")
}

model user_accounts {
  user_id                                                     Int              @id @default(autoincrement())
  username                                                    String           @db.VarChar(50)
  password                                                    String           @db.VarChar(255)
  person_id                                                   Int              @unique(map: "unique_person_user")
  profile_id                                                  Int
  movement_items_movement_items_salesperson_idTouser_accounts movement_items[] @relation("movement_items_salesperson_idTouser_accounts")
  movement_items_movement_items_technician_idTouser_accounts  movement_items[] @relation("movement_items_technician_idTouser_accounts")
  persons                                                     persons          @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction)
  profiles                                                    profiles         @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade, onUpdate: NoAction)
  user_license                                                user_license[]
  user_roles                                                  user_roles[]
}

model user_license {
  user_license_id Int           @id @default(autoincrement())
  user_id         Int
  license_id      Int
  licenses        licenses      @relation(fields: [license_id], references: [license_id], onDelete: Cascade, onUpdate: NoAction)
  user_accounts   user_accounts @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([license_id], map: "idx_user_license_license_id")
  @@index([user_id], map: "idx_user_license_user_id")
}

model user_permissions {
  permission_id    Int                @id(map: "permissions_pkey") @default(autoincrement())
  permission_name  String             @unique(map: "permissions_permission_name_key") @db.VarChar(100)
  description      String?
  resource         String             @db.VarChar(50)
  action           String             @db.VarChar(20)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]

  @@unique([resource, action], map: "permissions_resource_action_key")
}

model user_roles {
  user_id       Int
  role_id       Int
  license_id    Int
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  licenses      licenses      @relation(fields: [license_id], references: [license_id], onDelete: NoAction, onUpdate: NoAction)
  roles         roles         @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  user_accounts user_accounts @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, role_id, license_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model v_license_id {
  license_id Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model v_model_movement_id {
  model_movement_id Int?

  @@ignore
}

model nfe_sampa {
  nfe_sampa_id Int      @id @default(autoincrement())
  chave_origem String?
  json_data    Json
  emissao      DateTime @default(now()) @db.Timestamp(6)
  json_retorno Json?
  url_xml      String?
  url_pdf      String?
  status       String?
}
