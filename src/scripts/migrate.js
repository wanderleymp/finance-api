const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');
const { isCompatibleVersion } = require('../utils/version');
const { setupDatabase, createDatabaseBackup } = require('./setup');

class DatabaseMigrator {
    constructor(config, requiredDbVersion, appVersion) {
        this.config = config;
        this.requiredDbVersion = requiredDbVersion;
        this.appVersion = appVersion;
        this.pool = config.pool; // Usa o pool que j√° vem configurado
        this.client = null;
        this.backupPath = '/var/backups/finance-api-new';
    }

    async init() {
        try {
            // Garantir diret√≥rio de backup
            if (!fs.existsSync(this.backupPath)) {
                fs.mkdirSync(this.backupPath, { recursive: true });
            }

            this.client = await this.pool.connect();
            console.log('üîå Conectado ao banco de dados');
        } catch (error) {
            console.error('‚ùå Erro ao conectar ao banco:', error);
            throw error;
        }
    }

    async checkMigrationTable() {
        const result = await this.client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'migrations'
            );
        `);
        return result.rows[0].exists;
    }

    async getCurrentVersion() {
        try {
            const result = await this.client.query(`
                SELECT config_value as version 
                FROM system_config 
                WHERE config_key = 'db_version'
            `);
            return result.rows[0]?.version || '0.0.0';
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao obter vers√£o atual:', error.message);
            return '0.0.0';
        }
    }

    async getPendingMigrations(files) {
        const pendingMigrations = [];
        
        for (const file of files) {
            try {
                // Verifica se a migra√ß√£o j√° foi executada
                const migrationResult = await this.client.query(
                    `SELECT COUNT(*) as count 
                     FROM migrations 
                     WHERE migration_name = $1 
                     AND database_name = $2`,
                    [file, this.config.database]
                );

                // Se a migra√ß√£o n√£o foi registrada, verifica a estrutura da tabela
                if (parseInt(migrationResult.rows[0].count) === 0) {
                    // Se for uma migra√ß√£o para person_contacts, verifica a estrutura
                    if (file.includes('person_contacts')) {
                        const tableExists = await this.client.query(`
                            SELECT EXISTS (
                                SELECT FROM information_schema.tables 
                                WHERE table_schema = 'public' 
                                AND table_name = 'person_contacts'
                            );
                        `);

                        if (tableExists.rows[0].exists) {
                            // Verifica se a estrutura est√° correta
                            const columnsResult = await this.client.query(`
                                SELECT column_name, data_type 
                                FROM information_schema.columns 
                                WHERE table_schema = 'public' 
                                AND table_name = 'person_contacts'
                            `);

                            const columns = columnsResult.rows.map(row => row.column_name);
                            const requiredColumns = ['id', 'person_id', 'contact_type', 'contact_value', 'created_at', 'updated_at'];
                            const hasAllColumns = requiredColumns.every(col => columns.includes(col));

                            if (!hasAllColumns) {
                                pendingMigrations.push(file);
                                console.log(`‚ö†Ô∏è Tabela person_contacts existe mas estrutura est√° incompleta. Adicionando √† lista de migra√ß√µes pendentes.`);
                            } else {
                                // Se a tabela existe e est√° correta, registra a migra√ß√£o como executada
                                await this.client.query(
                                    `INSERT INTO migrations 
                                     (migration_name, db_version, database_name, description)
                                     VALUES ($1, $2, $3, $4)`,
                                    [file, this.requiredDbVersion, this.config.database, `Migra√ß√£o: ${file} (registrada ap√≥s verifica√ß√£o)`]
                                );
                                console.log(`‚úÖ Tabela person_contacts j√° existe com estrutura correta. Registrando migra√ß√£o.`);
                            }
                        } else {
                            pendingMigrations.push(file);
                        }
                    } else if (file.includes('person_documents')) {
                        const tableExists = await this.client.query(`
                            SELECT EXISTS (
                                SELECT FROM information_schema.tables 
                                WHERE table_schema = 'public' 
                                AND table_name = 'person_documents'
                            );
                        `);

                        if (tableExists.rows[0].exists) {
                            const expectedStructure = this.getExpectedStructure(file);
                            if (expectedStructure) {
                                const isStructureCorrect = await this.checkTableStructure(
                                    expectedStructure.tableName,
                                    expectedStructure.columns,
                                    expectedStructure.extraChecks
                                );

                                if (isStructureCorrect) {
                                    console.log(`‚úÖ Tabela person_documents j√° existe com estrutura correta. Registrando migra√ß√£o.`);
                                    await this.registerMigration(file, `Estrutura verificada e registrada: ${expectedStructure.tableName}`);
                                    return;
                                }
                            }
                        }

                        pendingMigrations.push(file);
                    } else {
                        pendingMigrations.push(file);
                    }
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è Erro ao verificar migra√ß√£o ${file}:`, error.message);
                // Se a tabela n√£o existe, considera todas as migra√ß√µes como pendentes
                if (error.code === '42P01') {
                    return files;
                }
                throw error;
            }
        }
        
        return pendingMigrations;
    }

    async checkTableStructure(file) {
        try {
            if (file === '20241214_adjust_person_documents.sql') {
                // Verifica se j√° est√° com a estrutura final desejada
                const result = await this.client.query(`
                    SELECT EXISTS (
                        SELECT 1 
                        FROM pg_type 
                        WHERE typname = 'document_type_enum'
                    ) as has_enum,
                    EXISTS (
                        SELECT 1 
                        FROM information_schema.columns 
                        WHERE table_name = 'person_documents' 
                        AND column_name = 'document_type' 
                        AND udt_name = 'document_type_enum'
                    ) as has_document_type,
                    EXISTS (
                        SELECT 1 
                        FROM information_schema.columns 
                        WHERE table_name = 'persons' 
                        AND column_name = 'active'
                    ) as has_active;
                `);

                const { has_enum, has_document_type, has_active } = result.rows[0];
                return has_enum && has_document_type && has_active;
            }
            return false;
        } catch (error) {
            console.error('Erro ao verificar estrutura:', error);
            return false;
        }
    }

    async executeMigration(file, migrationContent) {
        try {
            // Verifica se a estrutura j√° est√° como desejada
            const isStructureOk = await this.checkTableStructure(file);
            
            if (isStructureOk) {
                console.log(`‚úÖ Estrutura j√° est√° correta para ${file}, apenas registrando migra√ß√£o`);
                await this.registerMigration(file, 'Estrutura j√° estava correta');
                return;
            }

            // Se n√£o estiver ok, executa a migra√ß√£o
            console.log(`üîÑ Executando migra√ß√£o: ${file}`);
            await this.client.query('BEGIN');
            try {
                await this.client.query(migrationContent);
                await this.registerMigration(file, 'Migra√ß√£o executada com sucesso');
                await this.client.query('COMMIT');
            } catch (error) {
                await this.client.query('ROLLBACK');
                throw error;
            }
        } catch (error) {
            console.error(`‚ùå Erro ao executar migra√ß√£o ${file}:`, error);
            throw error;
        }
    }

    async registerMigration(file, description = '') {
        try {
            await this.client.query(
                `INSERT INTO migrations 
                 (migration_name, db_version, database_name, description)
                 VALUES ($1, $2, $3, $4)`,
                [file, this.requiredDbVersion, this.config.database, description]
            );
            console.log(`‚úÖ Migra√ß√£o ${file} registrada com sucesso`);
        } catch (error) {
            console.error(`‚ùå Erro ao registrar migra√ß√£o ${file}:`, error);
            throw error;
        }
    }

    getExpectedStructure(migrationFile) {
        // Mapeia cada arquivo de migra√ß√£o para sua estrutura esperada
        const structureMap = {
            '20241214_create_person_contacts.sql': {
                tableName: 'person_contacts',
                columns: [
                    { name: 'id', type: 'uuid' },
                    { name: 'person_id', type: 'uuid' },
                    { name: 'contact_type', type: 'character varying' },
                    { name: 'contact_value', type: 'character varying' },
                    { name: 'created_at', type: 'timestamp without time zone' },
                    { name: 'updated_at', type: 'timestamp without time zone' }
                ]
            },
            '20241214_adjust_person_documents.sql': {
                tableName: 'person_documents',
                columns: [
                    { name: 'id', type: 'uuid' },
                    { name: 'person_id', type: 'uuid' },
                    { name: 'document_type', type: 'user-defined' }, // tipo ENUM
                    { name: 'document_number', type: 'character varying' },
                    { name: 'created_at', type: 'timestamp without time zone' },
                    { name: 'updated_at', type: 'timestamp without time zone' }
                ],
                // Adiciona verifica√ß√£o espec√≠fica para o ENUM
                async extraChecks(client) {
                    try {
                        // Verifica se o ENUM existe e tem os valores corretos
                        const enumResult = await client.query(`
                            SELECT e.enumlabel
                            FROM pg_type t 
                            JOIN pg_enum e ON t.oid = e.enumtypid  
                            WHERE t.typname = 'document_type_enum'
                            ORDER BY e.enumsortorder;
                        `);
                        
                        const expectedEnumValues = ['CPF', 'CNPJ', 'RG', 'CNH', 'OUTROS'];
                        const currentEnumValues = enumResult.rows.map(row => row.enumlabel);
                        
                        const hasCorrectEnum = expectedEnumValues.every(val => 
                            currentEnumValues.includes(val)
                        );

                        // Verifica se persons tem a coluna active
                        const personsResult = await client.query(`
                            SELECT column_name, data_type 
                            FROM information_schema.columns 
                            WHERE table_name = 'persons' 
                            AND column_name = 'active';
                        `);
                        
                        const hasActiveColumn = personsResult.rows.length > 0;

                        return hasCorrectEnum && hasActiveColumn;
                    } catch (error) {
                        console.error('Erro na verifica√ß√£o extra:', error);
                        return false;
                    }
                }
            }
        };

        return structureMap[migrationFile] || null;
    }

    async updateSystemVersion() {
        try {
            // Verifica se j√° existe registro de vers√£o
            const result = await this.client.query(`
                SELECT config_value 
                FROM system_config 
                WHERE config_key = 'db_version'
            `);

            if (result.rows.length > 0) {
                // Atualiza vers√£o existente
                await this.client.query(`
                    UPDATE system_config 
                    SET config_value = $1, 
                        updated_at = CURRENT_TIMESTAMP 
                    WHERE config_key = 'db_version'
                `, [this.requiredDbVersion]);
            } else {
                // Insere nova vers√£o
                await this.client.query(`
                    INSERT INTO system_config 
                    (config_key, config_value, description) 
                    VALUES ('db_version', $1, 'Vers√£o atual do banco de dados')
                `, [this.requiredDbVersion]);
            }

            console.log(`‚úÖ Vers√£o do sistema atualizada para ${this.requiredDbVersion}`);
        } catch (error) {
            console.error('‚ùå Erro ao atualizar vers√£o do sistema:', error);
            throw error;
        }
    }

    async migrate() {
        try {
            console.log('üöÄ Iniciando processo de migra√ß√£o...');
            
            // Conectar ao banco primeiro
            this.client = await this.pool.connect();
            console.log('üîå Conectado ao banco de dados');

            // Setup inicial do banco se necess√°rio
            console.log('üîß Realizando setup inicial do banco...');
            await setupDatabase(this.client);
            
            // Verifica vers√£o atual
            const currentVersion = await this.getCurrentVersion();
            console.log(`üìä Vers√£o atual do banco: ${currentVersion}`);
            console.log(`üìä Vers√£o requerida: ${this.requiredDbVersion || '1.0.0'}`);
            
            // Se n√£o tiver vers√£o requerida, usa 1.0.0 como padr√£o
            this.requiredDbVersion = this.requiredDbVersion || '1.0.0';
            
            // Se a vers√£o atual for 0.0.0, n√£o precisa verificar compatibilidade
            if (currentVersion !== '0.0.0' && !isCompatibleVersion(currentVersion, this.requiredDbVersion)) {
                throw new Error(`Vers√£o do banco ${currentVersion} n√£o √© compat√≠vel com a vers√£o requerida ${this.requiredDbVersion}`);
            }

            // Criar backup antes das migra√ß√µes
            console.log('üì¶ Iniciando backup pr√©-migra√ß√£o...');
            await createDatabaseBackup(this.client, this.backupPath, this.config.database);
            
            // Ler arquivos de migra√ß√£o
            const migrationsPath = path.join(__dirname, '..', 'migrations');
            console.log(`üìÇ Buscando migra√ß√µes em: ${migrationsPath}`);
            
            const directories = ['system'];
            let allMigrations = [];
            
            for (const dir of directories) {
                const dirPath = path.join(migrationsPath, dir);
                console.log(`  ‚Ü≥ Verificando diret√≥rio: ${dir}`);
                
                if (fs.existsSync(dirPath)) {
                    const files = fs.readdirSync(dirPath)
                        .filter(file => file.endsWith('.sql') && !file.endsWith('_down.sql'))
                        .sort();
                    console.log(`    üìÑ Encontradas ${files.length} migra√ß√µes`);
                    allMigrations = [...allMigrations, ...files];
                } else {
                    console.log(`    ‚ö†Ô∏è Diret√≥rio n√£o encontrado: ${dirPath}`);
                }
            }

            // Verificar migra√ß√µes pendentes
            console.log('üîç Verificando migra√ß√µes pendentes...');
            const pendingMigrations = await this.getPendingMigrations(allMigrations);
            console.log(`  ‚Ü≥ ${pendingMigrations.length} migra√ß√µes pendentes encontradas`);
            
            if (pendingMigrations.length === 0) {
                console.log('‚úÖ Banco j√° est√° atualizado!');
                return;
            }

            // Executar migra√ß√µes pendentes
            console.log('üîÑ Executando migra√ß√µes pendentes...');
            for (const file of pendingMigrations) {
                const migrationPath = path.join(migrationsPath, 'system', file);
                console.log(`  ‚Ü≥ Executando: ${file}`);
                
                const migrationContent = fs.readFileSync(migrationPath, 'utf8');
                await this.executeMigration(file, migrationContent);
            }

            // Atualizar vers√£o do sistema
            console.log('üìù Atualizando vers√£o do sistema...');
            await this.updateSystemVersion();
            
            console.log('‚úÖ Processo de migra√ß√£o conclu√≠do com sucesso!');
        } catch (error) {
            console.error('‚ùå Erro durante migra√ß√£o:', error);
            throw error;
        } finally {
            if (this.client) {
                console.log('üîå Fechando conex√£o com o banco...');
                await this.client.release();
            }
        }
    }

    static async runMigrations(config) {
        const migrator = new DatabaseMigrator(config, '1.0.0');
        await migrator.migrate();
    }
}

async function runMigrations(config) {
    try {
        console.log('üöÄ Iniciando processo de migra√ß√£o');
        console.log('üì¶ Configura√ß√µes de banco de dados:', config);

        if (!config || !config.pool) {
            throw new Error('Configura√ß√£o de banco inv√°lida: pool n√£o encontrado');
        }

        const migrator = new DatabaseMigrator(config, '1.0.0');
        await migrator.migrate();
    } catch (error) {
        console.error('‚ùå Erro na migra√ß√£o:', error);
        throw error;
    }
}

module.exports = { runMigrations };
