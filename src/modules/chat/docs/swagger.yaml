openapi: 3.0.0
tags:
  - name: Chats
    description: Endpoints relacionados ao sistema de chat

components:
  schemas:
    ChatStatus:
      type: string
      enum: [active, archived, deleted]
      example: active
    
    ChatType:
      type: string
      enum: [individual, group]
      example: individual

    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        content:
          type: string
          example: "Olá, como vai?"
        type:
          type: string
          enum: [text, image, file]
          example: text
        sender:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "João Silva"
        createdAt:
          type: string
          format: date-time
    
    WebSocketEvent:
      type: object
      properties:
        event:
          type: string
          example: "message"
        data:
          type: object
          example: {
            "chatId": 1,
            "content": "Olá!",
            "type": "text"
          }

paths:
  /api/chats:
    get:
      tags:
        - Chats
      summary: Lista todos os chats
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de chats retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                      itemCount:
                        type: integer
                      itemsPerPage:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer

  /api/chats/{chatId}/messages:
    get:
      tags:
        - Chats
      summary: Lista mensagens de um chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Lista de mensagens retornada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatMessage'
                  meta:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                      currentPage:
                        type: integer

  /api/chats/{chatId}/status:
    put:
      tags:
        - Chats
      summary: Atualiza o status de um chat
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/ChatStatus'
      responses:
        '200':
          description: Status atualizado com sucesso

x-websocket-events:
  connection:
    - event: connect
      description: Conectar ao WebSocket
      example: |
        const socket = io('http://localhost:3000/chats', {
          auth: { token: 'seu-token-jwt' }
        });

    - event: disconnect
      description: Desconectar do WebSocket
      example: |
        socket.disconnect();

  chat:
    - event: joinChat
      description: Entrar em um chat
      payload:
        type: object
        properties:
          chatId:
            type: integer
            example: 1
      example: |
        socket.emit('joinChat', { chatId: 1 });

    - event: message
      description: Enviar mensagem
      payload:
        type: object
        properties:
          chatId:
            type: integer
          content:
            type: string
          type:
            type: string
      example: |
        socket.emit('message', {
          chatId: 1,
          content: 'Olá!',
          type: 'text'
        });

    - event: typing
      description: Indicar que está digitando
      payload:
        type: object
        properties:
          chatId:
            type: integer
      example: |
        socket.emit('typing', { chatId: 1 });
