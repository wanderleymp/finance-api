const roadmapService = require('../src/services/roadmapService');
const { logger } = require('../src/middlewares/logger');

const roadmapTasks = [
  // 1. Configura√ß√£o Inicial
  {
    title: 'Estrutura de Pastas e Arquivos',
    description: 'Configura√ß√£o inicial do projeto e cria√ß√£o de arquivos essenciais (package.json, .env, README.md).',
    status: 'pendente'
  },
  {
    title: 'Configura√ß√£o do Git',
    description: 'Configura√ß√£o do controle de vers√£o e integra√ß√£o com o GitHub.',
    status: 'pendente'
  },
  {
    title: 'Conex√£o com Banco de Dados',
    description: 'Configura√ß√£o inicial do PostgreSQL usando strings de conex√£o do .env.',
    status: 'pendente'
  },

  // 2. Arquitetura do Projeto
  {
    title: 'Cria√ß√£o da Camada de Configura√ß√£o',
    description: 'Centralizar strings de conex√£o e vari√°veis de ambiente.',
    status: 'pendente'
  },
  {
    title: 'Camada de Reposit√≥rios',
    description: 'Criar reposit√≥rios para acesso ao banco de dados.',
    status: 'pendente'
  },
  {
    title: 'Camada de Servi√ßos',
    description: 'Implementar regras de neg√≥cio.',
    status: 'pendente'
  },
  {
    title: 'Camada de Controladores',
    description: 'Controladores de rotas RESTful.',
    status: 'pendente'
  },
  {
    title: 'Defini√ß√£o de Rotas',
    description: 'Configura√ß√£o inicial das rotas RESTful.',
    status: 'pendente'
  },

  // 3. Recursos Principais
  // 3.1 Tarefas e Registro de Desenvolvimento
  {
    title: 'Tabela Roadmap',
    description: 'Criar estrutura no banco para armazenar tarefas.',
    status: 'pendente'
  },
  {
    title: 'Registro Autom√°tico de Tarefas',
    description: 'Atualizar status das tarefas automaticamente.',
    status: 'pendente'
  },

  // 3.2 Logs e Monitoramento
  {
    title: 'Logs de Requisi√ß√µes',
    description: 'Configurar Morgan e Winston para log de requisi√ß√µes HTTP.',
    status: 'pendente'
  },
  {
    title: 'Logs de Erros',
    description: 'Registrar erros de API e opera√ß√µes em arquivos de log.',
    status: 'pendente'
  },
  {
    title: 'Captura de Exce√ß√µes',
    description: 'Configurar logs de erros n√£o tratados e exce√ß√µes globais.',
    status: 'pendente'
  },

  // 3.3 Processos Ass√≠ncronos
  {
    title: 'Configura√ß√£o do RabbitMQ',
    description: 'Configurar filas e consumidores para processamento ass√≠ncrono.',
    status: 'pendente'
  },
  {
    title: 'Mensagens de Tarefas',
    description: 'Configurar envio e processamento de mensagens ass√≠ncronas.',
    status: 'pendente'
  },

  // 4. Seguran√ßa e Autentica√ß√£o
  {
    title: 'JWT Autentica√ß√£o',
    description: 'Configura√ß√£o de tokens JWT para autentica√ß√£o de usu√°rios.',
    status: 'pendente'
  },
  {
    title: 'Prote√ß√£o de Rotas',
    description: 'Aplicar middleware de autentica√ß√£o em rotas protegidas.',
    status: 'pendente'
  },
  {
    title: 'Pol√≠ticas de CORS',
    description: 'Configurar pol√≠ticas de seguran√ßa CORS para controle de acesso.',
    status: 'pendente'
  },

  // 5. Testes e Implementa√ß√£o
  {
    title: 'Testes de Integra√ß√£o',
    description: 'Criar testes para rotas e controladores usando Jest.',
    status: 'pendente'
  },
  {
    title: 'Testes de Unidade',
    description: 'Cobrir fun√ß√µes principais com testes unit√°rios.',
    status: 'pendente'
  },
  {
    title: 'Testes de Regress√£o',
    description: 'Simular casos de falha e realizar an√°lise de desempenho.',
    status: 'pendente'
  },

  // 6. Deploy e Configura√ß√£o de Produ√ß√£o
  {
    title: 'Configura√ß√£o de Produ√ß√£o',
    description: 'Configurar ambientes de produ√ß√£o usando Docker.',
    status: 'pendente'
  },
  {
    title: 'Deploy Autom√°tico',
    description: 'Configurar integra√ß√£o cont√≠nua no GitHub Actions.',
    status: 'pendente'
  },
  {
    title: 'Monitoramento e Logs de Produ√ß√£o',
    description: 'Configurar integra√ß√£o com ferramentas de monitoramento.',
    status: 'pendente'
  }
];

async function populateRoadmap() {
  try {
    for (const task of roadmapTasks) {
      await roadmapService.createTask(task.title, task.description, task.status);
      logger.info(`Tarefa criada no roadmap: ${task.title}`);
    }
    logger.info('üöÄ Roadmap completo registrado com sucesso!');
  } catch (error) {
    logger.error('Erro ao popular roadmap', { 
      error: error.message 
    });
  }
}

populateRoadmap();

module.exports = { populateRoadmap };
